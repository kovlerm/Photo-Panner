#include "Selector.h"

SELECTOR::SELECTOR(){};

void SELECTOR::upd(unsigned long int ulNow, unsigned int bC, unsigned int bZ, int JoyX, int JoyY) {
   
    // Momentary reading 
    if (JoyY>15) {
      onMUp(JoyY);
      mUp=1; 
      if (mDown) onMDownStop(); 
      mDown=0;
    }
    else if (JoyY<-15) {
      onMDown(-JoyY); 
      if (mUp) onMUpStop(); 
      mUp=0; 
      mDown=1;
    }
    else {
      if (mUp) onMUpStop();
      if (mDown) onMDownStop();
      mUp=0; 
      mDown=0;
    };
    
    if (JoyX>15) {
      onMRight(JoyX); 
      mRight=1; 
      if (mLeft) onMLeftStop();
      mLeft=0;
    }
    else if (JoyX<-15) {
      onMLeft(-JoyX); 
      if (mRight) onMRightStop();
      mRight=0; 
      mLeft=1;
    }
    else {
      if (mLeft) onMLeftStop();
      if (mRight) onMRightStop();
      mRight=0; 
      mLeft=0;
    };

    // Logical events
    if (JoyY>30) {bUp=1; bDown=0;}
    else if (JoyY<-30) {bUp=0; bDown=1;}
    else {bUp=0; bDown=0;};
    
    if (JoyX>30) {bRight=1; bLeft=0;}
    else if (JoyX<-30) {bRight=0; bLeft=1;}
    else {bRight=0; bLeft=0;};

    if (JoyY>30) {bUp=1; bDown=0;}
    else if (JoyY<-30) {bUp=0; bDown=1;}
    else {bUp=0; bDown=0;};
    
    
    // Events   
    if (bC && !lastC) { //press down
      onC();
      onC_Down();
      //set timers
      tRC=ulNow+s_iAutoRepeatDelay; // first time repeat timer
      tLC=ulNow+s_iLongKeyDelay;    // first time long key timer
    }
    else if (bC && tRC-ulNow<0) { // repeat timer event
      onCRepeat(); 
      tRC=ulNow+s_iDebounceDelay; // first time repeat timer
    }
    else if (bC && tLC-ulNow<0) { // long key timer event
      onCRepeat(); 
      tRC=ulNow+s_iDebounceDelay; // first time repeat timer
    }
    else if (!bC && lastC) onC_Up(); //unpressed
     
    if (bZ && !lastZ) {
      onZ();
      onZ_Down();
    }
    else if (!bZ && lastZ) onZ_Up();

    if (bRight && !lastRight) {
      if (bC) onCRight();
      else if (bZ) onZRight();
      else onRight();
    };
    if (bLeft && !lastLeft) {
      if (bC) onCLeft();
      else if (bZ) onZLeft();
      else onLeft(); 
    };
    if (bUp && !lastUp) {
      if (bC) onCUp();
      else if (bZ) onZUp();
      else onUp();      
    };
    if (bDown && !lastDown) {
     if (bC) onCDown();
      else if (bZ) onZDown();
      else onDown();            
    };

    // Long events check
    if (bC) cC++;
    else if (lastC) {cC=0; dC=iLong;};

    if (bZ) cZ++;
    else if (lastZ) {cZ=0; dZ=iLong;};  

    if (bLeft) cLeft++;
    else if (lastLeft) {cLeft=0; dLeft=iLong;}; 

    if (bRight) cRight++;
    else if (lastRight) {cRight=0; dRight=iLong;}; 

    if (bUp) cUp++;
    else if (lastUp) {cUp=0; dUp=iLong;}; 

    if (bDown) cDown++;
    else if (lastDown) {cDown=0; dDown=iLong;}; 


    // Long Events Call 
    bLC=bLZ=bLLeft=bLRight=bLUp=bLDown=0;
    if (cC>dC) {cC=0; dC=dLong; bLC++;};
    if (cZ>dZ) {cZ=0; dZ=dLong; bLZ++;};
    if (cLeft>dLeft) {cLeft=0; dLeft=dLong; bLLeft++;};
    if (cRight>dRight) {cRight=0; dRight=dLong; bLRight++;};
    if (cUp>dUp) {cUp=0; dUp=dLong; bLUp++;};    
    if (cDown>dDown) {cDown=0; dDown=dLong; bLDown++;};    


    if (bC) {
      if (bLLeft) {onCLongLeft(); cC=0;}
      else if (bLRight) {onCLongRight(); cC=0;}
      else if (bLUp) {onCLongUp();  cC=0;}
      else if (bLDown) {onCLongDown();  cC=0;}
      else if (bLC && !bLeft && !bRight && !bUp && !bDown ) {onLongC(); cC=0;};
     }
    else if (bZ) {
      if (bLLeft) {onZLongLeft(); cZ=0;}
      else if (bLRight) {onZLongRight(); cZ=0;}
      else if (bLUp) {onZLongUp();  cZ=0;}
      else if (bLDown) {onZLongDown();  cZ=0;}
      else if (bLZ && !bLeft && !bRight && !bUp && !bDown ) {onLongZ(); cZ=0;};
    }
    else if (bLLeft) onLongLeft();
    else if (bLRight) onLongRight();
    else if (bLUp) onLongUp();
    else if (bLDown) onLongDown();

    lastC=bC;
    lastZ=bZ;  
    lastJoyX=JoyX;
    lastJoyY=JoyY;    

    
    lastLeft=bLeft;
    lastRight=bRight;
    lastUp=bUp;
    lastDown=bDown;
 
  };
